package com.protocol7.nettyquick.protocol;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import com.protocol7.nettyquick.TestUtil;
import com.protocol7.nettyquick.protocol.frames.PaddingFrame;
import com.protocol7.nettyquick.protocol.frames.PingFrame;
import com.protocol7.nettyquick.tls.AEAD;
import com.protocol7.nettyquick.tls.NullAEAD;
import com.protocol7.nettyquick.tls.TestAEAD;
import com.protocol7.nettyquick.utils.Hex;
import com.protocol7.nettyquick.utils.Rnd;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import org.junit.Test;

public class UnprotectedPayloadTest {

  private final AEAD aead = TestAEAD.create();
  private final PacketNumber pn = new PacketNumber(1);
  private final byte[] aad = new byte[12];

  @Test
  public void roundtrip() {
    UnprotectedPayload payload = new UnprotectedPayload(PingFrame.INSTANCE, PaddingFrame.INSTANCE);

    ByteBuf bb = Unpooled.buffer();
    payload.write(bb, aead, pn, aad);

    UnprotectedPayload parsed = UnprotectedPayload.parse(bb, payload.getLength(), aead, pn, aad);

    assertEquals(payload, parsed);
  }

  @Test
  public void write() {
    UnprotectedPayload payload = new UnprotectedPayload(PingFrame.INSTANCE, PaddingFrame.INSTANCE);

    ByteBuf bb = Unpooled.buffer();
    payload.write(bb, aead, pn, aad);

    TestUtil.assertBuffer("e7ece5d6d0adf7f6bf189050d8fcace66501", bb);
  }

  @Test
  public void parse() {
    ByteBuf bb = Unpooled.copiedBuffer(Hex.dehex("e7ece5d6d0adf7f6bf189050d8fcace66501"));
    UnprotectedPayload parsed = UnprotectedPayload.parse(bb, bb.writerIndex(), aead, pn, aad);

    UnprotectedPayload expected = new UnprotectedPayload(PingFrame.INSTANCE, PaddingFrame.INSTANCE);
    assertEquals(expected, parsed);
  }

  @Test
  public void addFrame() {
    UnprotectedPayload payload = new UnprotectedPayload(PingFrame.INSTANCE);

    UnprotectedPayload withAdded = payload.addFrame(PaddingFrame.INSTANCE);

    UnprotectedPayload expected = new UnprotectedPayload(PingFrame.INSTANCE, PaddingFrame.INSTANCE);

    assertEquals(expected, withAdded);
    assertEquals(new UnprotectedPayload(PingFrame.INSTANCE), payload); // must not been mutated
  }

  @Test
  public void parseKnown() {
    byte[] b = Hex.dehex("820607daeee3d48e6f5208b97d8380ea38c52177d3cb60cd9e965b3e062ef97cd7c7429f31a8e36dac45a9070df4260c1e097de320bcbfe4baea1cc7ce2c3b9ca01fafd79a66e304ca437876d3cea3065ddc2e40813f46a210e8df5ec56351037c55337b07da77558371329cb914e1674f42bc7d8ecbe9716c454872f5ed559b70be20845c18dd1b0bef002e13ed84d6ea6394bb71f740792c5c3a6d5e109668f4a8549e16af734100c64679a2d5e6ff1fa8e6a9fd81af8a96d3d4dc17a06ae6ebe15fe69038425d93fa2be107b8453d602560d548bb43c0ba60f2736d57449b22110f7014a87a294193f73fdd8666737c049d214978c9d6e3342ced6d079703c9ea3554201827e1281213054983d48be0492fe95960c5e2a9b028607627768b414ade77136b84f27f9dee1af7989ea1b07330753c9434c583d0ab8bf134b946605d7aae3f7c7a4eb9eed33b91e76c509f0c4b5a4a5ffc5a340a7f204596bbb0ac587f543a0912da555b254320f8b28fb2237fa88e00df5faa80751710d6620fe4b756ace3e311cc1069e4b09580247e6a5b10d0031f7f7f7b81f453ebff36eee9ed264bf3f2b74a446e70447566af5366958354567fa191339e6d890d3bf6521d5b1ecc8f40b6b795920c482c5802f2b6e7d2b471b003f27cfb1911bef44af4b9c2a4ffa867caa61f8c3b33b34489c22833673bc1eb558534a7f796f413adc97772855c1a73709752567f677d680e99e8c8b8b803fe2040012c3a7d8d71d6be76ef136a1142d36435c72c8472b4094fbdbcb2fdb0ea5df2e6ef29c4e91269d3cd69845b928de02b20332481dd64a4b602b415af30d50744b7a93f34b4a76c1c61593080cc45d5b37030cc642a6e31e1b00cd7df411571913e781f8b4b131cda6eeea9dec6de5e91b3616761cf2ac0af8e1cf85a29a81a0f47dce4d06e856128204c623007a119248c759a1816e71830e73a7cb4f6fae33f4ecf207b5bc32eff66c9f4055aa114e387e321034096a3cb3ce52ee37a8407f37d29cd45e0e2a64cee77594bbd8250ac4ef719fac3d5c2a7d527f03eacaa6faabb8a1f4745292a8eea359e41aaeb9dda1b77eabfb2a5191740e0bcedf6c3593ea5e982276c1b5041b97bab6213ab8eb8122e1a691de63bc24dda069903125c0d56414a20efa82fbd81b28f65bf151c2f42be3e7c0b6bf62063c2e31c5f6b102fbf27e18cc2a796b2e1e6d4425d362fee8cdc803356bcdc72e342458b7dbdcf982075ac7657b112a653b336ea0c6b4e956c6136b08d5ed06cc163072e531965a0dc8a81044c5fae28e4156c4b336869f7dd7a122c32caa225ca8c572c3a20ee0ce109090bacd57209b3bd59128ff3c360bc0ad5cdd9874e22528cec1c866024cdf5455fc7f84e8c8fc9f070eff3c800de91f95dad91987e9b9eff99050f2ec235eb98dde9b148bdb28c80a17cf91afa3aaf53a6b9dc66a751302359cd05fa30fd575d8ef2a107367296c481d5d8a5d73b4cc1eee5ba77ebb4a064a00aa2e54d8a4f26d854988123248fe90ea4b306942d02da55bbb0376ca0de455663bb8a0ca1ff7f24eee150611c44d85d250e5f6f67b33c193b49ae858170ef8f4270c993c4f2942182ac4cacaaabefc3170c9907debb79befae9897ca8f7b6642ec630421218312a4edd40f8b425a52bf6bb1f9c8b822e67237d40222782cd5f3581e531ecd47998239a179dfc");

    ByteBuf bb = Unpooled.wrappedBuffer(b);

    AEAD aead = new AEAD(
            Hex.dehex("9dc2872d9183102a4a75adbfad81c930"),
            Hex.dehex("71982e1f323b8d41377f79c6913f76d9"),

            Hex.dehex("c9ee450f01e4718214341a45"),
            Hex.dehex("af0c01b4fcd8c7e228f2dfe5"));

    PacketNumber pn = new PacketNumber(1);

    byte[] aad = Hex.dehex("ff000000651094f217c33fe1b40a695562cbf368fd43019bfd5ca6f32f8dc9e1ee7afcd038f553e696e92e06d6feb3e4c7197b91b0e047b7c3528f0cc8c8a23e631928bef2ddca99b78644c001");

    UnprotectedPayload up = UnprotectedPayload.parse(bb, bb.readableBytes(), aead, pn, aad);

    System.out.println(up);
  }

  @Test
  public void parseKnown2() {
    /*
opening src=2c87699799676af21ff99bafeb1dc39ef9fc94c5bb8a1d14e343ee034cd2a04851f928a7cbc6013a9a7d55d7863f21b8a6feb4ae165fa56b3f7b439e11a405dd3966ba64ed9386bd87af02092232fa408734f07ef0e3b144acdde73403fb9104e6a3cfefbf9d6efcdb05b0238d00f670b0b63b5f7d77eff344008da1ded105a6cd9df78466ff58744ca1d6797b08d171706f6e7decb23f872c7240b5e6858b96e8b7213c12ec249b4e407ad5b4f0b81ec2432aee0d221436be94e3f3e583072be2719fe4c30dff4a60fb0b51ca3cf6dd76be0c98180c54bdd0fb89479dd9c9367fafa91d02b94852572c68c4ed95d65dc387f01ebfe9f17601bd7dbda9a00cef811758fd2fca2bdc33da2136866834ec6293a3ff60553faa3dee2ab6f9ff1481db0957da43645d1f1e42a85c01853c8b19a4b076acd5ad1991813e61c10af43e84e84872cf46c658cd99b236d939fae20ee935096523e46c57172f7673474b2ceaae5d61d879f93fe11669eb23fdfd1de5652981f00baa8338f2eb628c79467459702d3093e051f845d83ca1571583d94f1182b07ab3c071f2dcdea85ab1dbbc105e0ee1358bc7706c2057f6c0a04c6ae5f6451bbe3125465c4a413fc13882dee925be7ddace1656929044475eb639f5f5c0f96af84f788e8e3fdf7e8b69ddfc2bf9a3ee453b22050590ce0f80ce47438755f8b696b03bf4966fa76e611b029d6c0429908b68ad662fc121503eb6a03f04502ef96bb1d9522f2e30c4da2f4c9dbb996beee3271c6c34c255cadd43dbfc528ac15ad010414825beecb572a3a17588077e52fbcffb762c5385221530175b66c516de2d7a10d986c721a2f38d0dc8664ab257daa817c6fa4532b583926f51dd598995b5c2b8bf57fa98b0925b9edbc892566236b19cfa4f34b264fdc2a1b1d3cf9f6fa335205605e15cc5c792e38744b9062c34c8c4290fa559417e41255ce2e0bcb3864080fb19407bc10897889f6db0c4b1c7cab5b27881483a9e4974b89bb6603b11c63bfe07488033364f0216bebed702c85095f42c819cd1b9b53a0f36589661886f3a898cfc4fcde4a390e8fa448231d778b4102f97de1dd6e1222a29290efd46b57ce4c429e56e1ab83336103fd7c990f5dd93cfcaf990f6a87dbd14d4892c7963b2a539a213a95111759aa90e3be2f39ecb5b1506b5b3707e7995a9d186f0209fd5d2afa5cf1409b3c7ccc332c70b66fbfa6b4f6b2dc3a584c1cd0a770f524322f18fb47e492f5f985bf1886cd704ec89070aa0ecdc39f3d5212d7ae6eeb5475deaebc120b69e742d71f28e490682cb09c6c20dcee18b9cff8c7d413a33155221eb5d26223a018470415d1298b0d32fa31c85cb6546c3fa1a7094076a526a7bb16d11f0d6e999b6b60fb245f11394412162e8b789c560a62888a3703f9cc0d36a5723a90957d76880061a3185e79da228949b97f903f891f96d3b234f4a084231063933c3de93f9ec040c1f406602703c0d62209d0fb2865404fe4d94332552c0c622749885723c219e0a2c099f79e854aeae1d59de7078b0eea8ff2623eb53afad8e5dceda231f20a9b4617b47fab152cdceff361f076ce88ce7e02eecc98314cea4b0ba4e319254013161ce8d77574e1faf65be26a1a1f64f1d282bfe42b2ff75ad1f9f63bacd07a3a834d9b2924bb5f900ebf5218efbdc7aa5de763620bf499db8c72b07850e421568cd1e647289b9b005d080454609e8d235cde77ca59e0d pnâ‰ˆ2 aad=fd0000006501f066dc0244d68002 myKey=5d537702cbae09bfc8420d10b3cdb2af otherKey=316b24f7e2dc8bf3a99ff18e459a42f5 myIV=40087bc24f8c77555caf10e2 otherIV=c7f346fde9d5d508c581d8f0

###### sealing myKey=ec7248a2896fadfaf37a2908773176c5 otherKey=d5a6766136b5821b23407b4de82fec82 myIV=d035dafb45862ebc2a63fed9 otherIV=b6fd7dec80d024859ed3e051 aad=ff0000006501f066dc020040b58001 pn=1 nonce=d035dafb45862ebc2a63fed8 src=1a01466700001800409b020000970303ef2ce1c4da717b59b6bbb9ae054a38ead7117750995de153a025de2b8357c278202fb4351a14525590326d02c24858223279d4d3717cbbb37d29c9793dd189b954130100004f002b000203040033004500170041047e94b5ac77b9ecb657a7a26eccc865c97731c47cc344fa496c4848630f3d7ccffb6efa31aa105c11234722531fb33229de79a80982775ab86b2f3dba589efd78
###### sealed cb6a379f012b5d8a6fea3396098cadb9f702deff05082d0cd6fe20a2790c3f68f034e96c1024b14997515bd7547c87db1316ec62562bb7c5cf56ec77b6b51f3905f6ee29cd681bc94f209729c6a1a1143f9df2480eddd73597c336e151ddcaee72650febfe85c53983bed8f142ba56962e1b4b9d3bedbc00a73476fa96b68958f207b86d7e096fc5f029f4769c8d996c07a03e84c46ab260cb03fc31b97c0e81ca4af99fe0b55522da62e8e025dfb81a759dd10e97


ff0000006501f066dc020040b58001cb6a379f012b5d8a6fea3396098cadb9f702deff05082d0cd6fe20a2790c3f68f034e96c1024b14997515bd7547c87db1316ec62562bb7c5cf56ec77b6b51f3905f6ee29cd681bc94f209729c6a1a1143f9df2480eddd73597c336e151ddcaee72650febfe85c53983bed8f142ba56962e1b4b9d3bedbc00a73476fa96b68958f207b86d7e096fc5f029f4769c8d996c07a03e84c46ab260cb03fc31b97c0e81ca4af99fe0b55522da62e8e025dfb81a759dd10e97
     */

    byte[] b = Hex.dehex("229264c1340f2101060c82c2daacb8b54b817f4c62b555177bca5b8eba8a4fa3c1702c61713609abecfc48444b611fa6f0eb76313218126bdf3c670c636aa384ce068a3af07868ba9271384e7e99153501a34fd679a5942dea92d5b782c75b4c9ded3c57428fdac8f4059c59ef0f618c374c07aeab35234038c46bb7a01607c5f55c23c9598babb56917997740393ce000da5790c83cccc382a423f863164237cfad46b6b1cabcac6ca151be01204040a09051285d");

    ByteBuf bb = Unpooled.wrappedBuffer(b);

    AEAD aead = new AEAD(
            Hex.dehex("f60338316756154f0610de3ed442dd51"),
            Hex.dehex("7021baaf03e02999a2d47a43e0cbe06a"),

            Hex.dehex("3960fbe721e18ac688b692e7"),
            Hex.dehex("4eec7558cb603004304b1952")
    );

    PacketNumber pn = new PacketNumber(1);

    byte[] aad = Hex.dehex("ff0000006501f67973660040b58001");

    UnprotectedPayload up = UnprotectedPayload.parse(bb, bb.readableBytes(), aead, pn, aad);

    System.out.println(up);
  }
}